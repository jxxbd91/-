二进制实现加法

一、原理：
1、化简

 实例：
 	看一下 3 + 4 的加法运算

 	3 的二进制表示： 011
 	4 的二进制表示： 100

 	3^4 (3按位异或4)的结果是： 111 => 7
 	上面的到的结果是就是 3 + 4 的实际结果


 	再看一个例子：

 	12 的二级制表示：01100
 	19 的二进制表示: 10011

 	12^19 的结果是： 11111 => 31

 	在看一个例子：
 	13 的二进制表示：01101
 	19 的二进制表示：10011

 	13^19 的结果是： 11110 => 20

 	通过上面的三个例子不难发现: 当二进制数的每一位加法中不发生进位时，按位异或的结果就是最终的加法结果，那么我需要做的就是将所有的加法操作最终都简化成没有进位的加法操作，最终的结果就是两个数按位异或的结果。

2、怎么处理有进位的加法？

 	拆分
 		将两个数的加法拆分为 进位加法和不进位加法

 	看一个例子：
		编号：1 2 3 4 5
		
		      1 0 0 1 1 => 19
		  	+ 1 1 0 1 0 => 26
		
			-------------

  	先求只有不进位的两个位相加的值，编号为2、3、5这三位的加法不发生进位操作，需要进位的相加位数直接按照结果为0处理，得到的结果为

		    编号：1 2 3 4 5
		    
		          1 0 0 1 1
		      	+ 1 1 0 1 0
		    
		    	-------------
		不进位：  0 1 0 0 1

	进位两个位相加的值，编号为1、4这三位的加法会发生进位操作，不需要进位的直接按照结果0处理，得到的结果为：

		    编号：1 2 3 4 5
		    
		          1 0 0 1 1
		      	+ 1 1 0 1 0
		    
		    	-------------
		不进位：  0 1 0 0 1
		进位：  1 0 0 1 0 0

			再将两个结果按位异或：
		不进位：0 0 1 0 0 1
		进  位：1 0 0 1 0 0
		  ------------------
		  		1 0 1 1 0 1 => 45

 	由此可见可以将一个二进制加法拆分为有进位的位数相加结果 和 无进位的位数相加的结果最终按位异或

3、递归

	再看一个例子

		编号：1 2 3 4 5

		      1 0 1 1 1 => 23
		  	+ 1 1 0 1 1 => 27

	  	------------------
	 不进位   0 1 1 0 0 => 12
	 进  位 1 0 0 1 1 0 => 38


 	通过一次相加得到的结果不能完全实现化简操作，所以需要递归地进行化简操作

		编号：1 2 3 4 5

		      1 0 1 1 1 => 23
		  	+ 1 1 0 1 1 => 27

	  	------------------
	不进位    0 0 1 1 0 0 => 12
	进  位    1 0 0 1 1 0 => 38

	 	------------------------
	不进位    1 0 1 0 1 0 => 42
	进  位	  0 0 1 0 0 0 => 8

	 	------------------------
	不进位    1 0 0 0 1 0 => 34
	进  位	  0 1 0 0 0 0 => 16

	 	------------------------
	不进位    1 1 0 0 1 0 => 50
	进  位	  0 0 0 0 0 0 => 0

  	以上实例通过递归的方式可以得到最终的结果

4、位运算实现
	通过以上几个实例我们明白了如何通过二进制的几个步骤来实现任意整数的加法操作，现在我们需要把这件事情用位运算进行表示。

	位运算表示不进位加法：
		不进位加法其实就是一个异或操作
	位运算表示进位加法：
		进位加法其实就是一个与操作的结果左移一位

5、代码实现

	js:
		function sum (a, b) {
			if (b===0) return a;
			return sum(a^b, (a&b)<<1)
		}

	java:

		public int sum(int a, int b) {
			if (b===0) return a;
			return sum(a^b, (a&b)<<1);
		}




阶乘末尾零的个数

11 10 9 8 7 6 5 4 3 2 1
11 5 2 9 8 7 6 5 4 3 2 1


25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1
5 5 24 23 22 21 4 5 19 18 17 16 3 5 [e14] 13 [c12] 11 5 2 9 [d8] 7 [b6] 5 4 3 [a2] 1

30 50

6  10
Math.floor(n / 5)

https://dev.999haoche.com:8661/scf/customer/api/overdueListExportByteOutput?applyCd=&applySubcd=&clearStatus=1&dealerName=&lendersDateFrom=&lendersDateTo=&pagyNo=0&pagyNum=0&repayStatus=1&scheduledRepayDateFrom=&scheduledRepayDateTo=&clearType=undefined&token=494817419823415296

https://dev.999haoche.com:8661/scf/customer/api/overdueListExportByteOutput?applyCd=&applySubcd=&clearStatus=1&dealerName=&lendersDateFrom=&lendersDateTo=&pagyNo=0&pagyNum=0&repayStatus=1&scheduledRepayDateFrom=&scheduledRepayDateTo=&clearType=&token=494817419823415296

https://dev.999haoche.com:8661/scf/customer/api/overdueListExportByteOutput?applyCd=&applySubcd=&clearStatus=1&dealerName=&lendersDateFrom=&lendersDateTo=&pagyNo=0&pagyNum=0&repayStatus=1&scheduledRepayDateFrom=&scheduledRepayDateTo=&clearType=1&token=494817419823415296


0 1 [2] 3 4 5 6 7 8 9 10 11 [12] 13 14 15 16 17 18 19 [20] 21 22 23 24 25 26 27 28 29 30 31 32 33 34

17 4   35 5 40 6 50 7 5 2 5   14 2 7 3  21 3 7 4  26 2 13 5    zhiyou 2   3 10  3   30 5  40 6 


k=2
S 0 ; E 4
L 0 ; R 4
length 5; K 3

	1	6	5	2	4

			p

	0	1	2	3	4


	  0
4 8 7 9 3 1 2 5 6
2 8 7 9 3 1 4 5 6
2 1 7 9 3 8 4 5 6
2 1 7 9 3 8 4 5 6

		  0
2 1 3 6 7 8 4 5 9

		0
2 1 3 6 7 5 4 8 9

		0
2 1 3 6 4 5 7 8 9

2 1 3 4 6 5 7 8 9



						1
				2				3
			4		5		6		7


			arr[i] = (function(i){
	        		return function(){
	        			return i;
	        		}
	      		})(i);
















3  11

	1 2 3 4 5 6 7 8 9 10 11
3
	4 2 3 1 5 6 7 8 9 10 11
6
	7 2 3 1 5 6 4 8 9 10 11
9
	10 2 3 1 5 6 4 8 9 7 11
1
	2 10 3 1 5 6 4 8 9 7 11
4
	5 10 3 1 2 6 4 8 9 7 11
7
	8 10 3 1 2 6 4 5 9 7 11
10
	11 10 3 1 2 6 4 5 9 7 8
2
	3 10 11 1 2 6 4 5 9 7 8
5
	6 10 11 1 2 3 4 5 9 7 8
8
	9 10 11 1 2 3 4 5 6 7 8


	a b c d e f g
3
	d b c a e f g
6
	g b c a e f d
9
	c b g a e f d

12
	f b g a e c d
15
	b f g a e c d
18
	e f g a b c d


3 6
	1 2 3 4 5 6
3
	4 2 3 1 5 6
6
	4 2 3 1 5 6
3
	4 5 3 1 2 6
6
	4 5 3 1 2 6
3
	4 5 6 1 2 3


	1 2 3 4 5 6


	for /L %i IN (22,1,22) DO (for /L %j IN (100,1,254) DO ping -w 2 -n 1 10.43.%i.%j)